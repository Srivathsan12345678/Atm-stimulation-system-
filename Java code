import javax.swing.*;

import java.awt.*;

import java.awt.event.*;

import java.util.HashMap;

import java.util.Map;



public class ATMSystem extends JFrame {

    private static final Map<String, String> users = new HashMap<>(); // Store account numbers and PINs

    private String currentAccountNumber;

    private int balance = 100000;



    private JTextField accountNumberField;

    private JPasswordField pinField;

    private JTextArea outputArea;



    public ATMSystem() {

        // Predefined users (You can add more users here)

        users.put("123456", "1234");

        users.put("987654", "4321");



        // Set up the GUI components

        setTitle("ATM System");

        setSize(500, 400);

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        setLayout(new BorderLayout());



        // Set background color

        getContentPane().setBackground(new Color(240, 240, 240));



        // Account Login Panel

        JPanel loginPanel = new JPanel();

        loginPanel.setLayout(new GridLayout(3, 2));

        loginPanel.setBackground(new Color(220, 220, 255)); // Light blue background



        loginPanel.add(new JLabel("Account Number:"));

        accountNumberField = new JTextField();

        loginPanel.add(accountNumberField);



        loginPanel.add(new JLabel("PIN:"));

        pinField = new JPasswordField();

        loginPanel.add(pinField);



        JButton loginButton = new JButton("Login");

        loginButton.setBackground(new Color(100, 150, 255)); // Light blue button

        loginButton.setForeground(Color.WHITE);

        loginButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {

                authenticate();

            }

        });

        loginPanel.add(loginButton);



        // Output Area for results

        outputArea = new JTextArea();

        outputArea.setEditable(false);

        outputArea.setFont(new Font("Arial", Font.PLAIN, 18)); // Increased font size

        outputArea.setBackground(Color.WHITE);

        outputArea.setForeground(Color.BLACK);

        JScrollPane scrollPane = new JScrollPane(outputArea);



        // Add components to the frame

        add(loginPanel, BorderLayout.NORTH);

        add(scrollPane, BorderLayout.CENTER);



        setVisible(true);

    }



    // Method to authenticate the user

    private void authenticate() {

        String enteredAccountNumber = accountNumberField.getText();

        String enteredPin = new String(pinField.getPassword());



        if (users.containsKey(enteredAccountNumber) && users.get(enteredAccountNumber).equals(enteredPin)) {

            currentAccountNumber = enteredAccountNumber;

            outputArea.setText("Authentication successful!\n");

            displayMainMenu();

        } else {

            outputArea.setText("Authentication failed! Invalid account number or PIN.\n");

        }

    }



    // Method to display the main menu after successful authentication

    private void displayMainMenu() {

        // Remove previous components (login screen)

        getContentPane().removeAll();

        revalidate();

        repaint();



        // Main menu panel

        JPanel menuPanel = new JPanel();

        menuPanel.setLayout(new GridLayout(4, 1));

        menuPanel.setBackground(new Color(220, 255, 220)); // Light green background



        JButton withdrawButton = new JButton("Withdraw");

        withdrawButton.setBackground(new Color(100, 200, 100)); // Light green button

        withdrawButton.setForeground(Color.WHITE);

        withdrawButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {

                withdraw();

            }

        });



        JButton depositButton = new JButton("Deposit");

        depositButton.setBackground(new Color(100, 200, 100)); // Light green button

        depositButton.setForeground(Color.WHITE);

        depositButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {

                deposit();

            }

        });



        JButton checkBalanceButton = new JButton("Check Balance");

        checkBalanceButton.setBackground(new Color(100, 200, 100)); // Light green button

        checkBalanceButton.setForeground(Color.WHITE);

        checkBalanceButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {

                checkBalance();

            }

        });



        JButton logoutButton = new JButton("Logout");

        logoutButton.setBackground(new Color(255, 100, 100)); // Red button for logout

        logoutButton.setForeground(Color.WHITE);

        logoutButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {

                logout();

            }

        });



        menuPanel.add(withdrawButton);

        menuPanel.add(depositButton);

        menuPanel.add(checkBalanceButton);

        menuPanel.add(logoutButton);



        add(menuPanel, BorderLayout.CENTER);



        // Output area at the bottom

        JScrollPane scrollPane = new JScrollPane(outputArea);

        add(scrollPane, BorderLayout.SOUTH);



        revalidate();

        repaint();

    }



    private void withdraw() {

        String amountStr = JOptionPane.showInputDialog("Enter amount to withdraw:");

        if (amountStr != null) {

            try {

                int amount = Integer.parseInt(amountStr);

                if (amount > 0 && amount <= balance) {

                    balance -= amount;

                    outputArea.setText("Withdrawal successful! New balance: " + balance);

                } else {

                    outputArea.setText("Insufficient balance or invalid amount.");

                }

            } catch (NumberFormatException e) {

                outputArea.setText("Invalid amount. Please enter a valid number.");

            }

        }

    }



    private void deposit() {

        String amountStr = JOptionPane.showInputDialog("Enter amount to deposit:");

        if (amountStr != null) {

            try {

                int amount = Integer.parseInt(amountStr);

                if (amount > 0) {

                    balance += amount;

                    outputArea.setText("Deposit successful! New balance: " + balance);

                } else {

                    outputArea.setText("Invalid amount. Please enter a positive number.");

                }

            } catch (NumberFormatException e) {

                outputArea.setText("Invalid amount. Please enter a valid number.");

            }

        }

    }



    private void checkBalance() {

        outputArea.setText("Current balance: " + balance);

    }



    private void logout() {

        currentAccountNumber = null;

        outputArea.setText("You have been logged out.\n");

        accountNumberField.setText("");

        pinField.setText("");

        displayLoginScreen();

    }



    // Method to display login screen

    private void displayLoginScreen() {

        // Remove previous components (main menu)

        getContentPane().removeAll();

        revalidate();

        repaint();



        JPanel loginPanel = new JPanel();

        loginPanel.setLayout(new GridLayout(3, 2));

        loginPanel.setBackground(new Color(220, 220, 255)); // Light blue background



        loginPanel.add(new JLabel("Account Number:"));

        accountNumberField = new JTextField();

        loginPanel.add(accountNumberField);



        loginPanel.add(new JLabel("PIN:"));

        pinField = new JPasswordField();

        loginPanel.add(pinField);



        JButton loginButton = new JButton("Login");

        loginButton.setBackground(new Color(100, 150, 255)); // Light blue button

        loginButton.setForeground(Color.WHITE);

        loginButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {

                authenticate();

            }

        });

        loginPanel.add(loginButton);



        outputArea.setText("");



        add(loginPanel, BorderLayout.NORTH);

        add(new JScrollPane(outputArea), BorderLayout.CENTER);



        revalidate();

        repaint();

    }



    public static void main(String[] args) {

        SwingUtilities.invokeLater(new Runnable() {

            @Override

            public void run() {

                new ATMSystem();

            }

        });

    }

}
